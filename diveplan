#!/usr/bin/python3

import csv
import datetime
import math
import time
import itertools
from docx.enum.style import WD_STYLE_TYPE
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx import Document 
from docx.shared import Pt 

#pip install python-docx

#Data from data.marine.ie/Dataset/Details/20955

def daterange(start_date, end_date):
    if start_date <= end_date:
        for n in range((end_date - start_date).days + 1):
            yield start_date + datetime.timedelta(n)

def white_strand_start(level):
    max_level = rule_of_twelfths(lahinch_spring_high_tide, lahinch_spring_low_tide, 1) 
    min_level = -math.inf
    return level < max_level and level > min_level 

def white_strand_end(level):
    max_level = rule_of_twelfths(lahinch_spring_high_tide, lahinch_spring_low_tide, 1) 
    min_level = -math.inf
    return level < max_level and level > min_level 

def ballyvaughan_start(level):
    max_level = rule_of_twelfths(lahinch_spring_high_tide, lahinch_spring_low_tide, 0) 
    min_level = rule_of_twelfths(lahinch_neap_high_tide, lahinch_neap_low_tide, 1.5) 
    return level < max_level and level > min_level 

def ballyvaughan_end(level):
    max_level = rule_of_twelfths(lahinch_spring_high_tide, lahinch_spring_low_tide, 0) 
    min_level = rule_of_twelfths(lahinch_neap_high_tide, lahinch_neap_low_tide, 1.5) 
    return level < max_level and level > min_level 

def gleninagh_start(level):
    max_level = rule_of_twelfths(lahinch_spring_high_tide, lahinch_spring_low_tide, 1) 
    min_level = -math.inf
    return level < max_level and level > min_level 

def gleninagh_end(level):
    max_level = rule_of_twelfths(lahinch_spring_high_tide, lahinch_spring_low_tide, 1) 
    min_level = -math.inf
    return level < max_level and level > min_level 
    
def rule_of_twelfths(high, low, time): # time in hours relative to high
     range = float(high)- float(low)
     return float(low) + (range * (math.cos(math.pi * time/6) + 1 ) / 2)
class DivePlan(object):
    def __init__(self):
       self.document = Document()
       style = self.document.styles['Normal']
       font = style.font
       font.name = "Arial"
       font.size = Pt(10)
      
       styles = self.document.styles
       style = styles.add_style('Bold Style', WD_STYLE_TYPE.PARAGRAPH) 
       style.base_style = styles['Normal']
       font = style.font
       font.bold = True

       style = styles.add_style('Bold Underline Style', WD_STYLE_TYPE.PARAGRAPH) 
       style.base_style = styles['Normal']
       font = style.font
       font.bold = True
       font.underline = True

       style = styles.add_style('Bold Large Style', WD_STYLE_TYPE.PARAGRAPH) 
       style.base_style = styles['Normal']
       font = style.font
       font.bold = True
       font.size = Pt(16)

       style = styles.add_style('Bold Underline Large Style', WD_STYLE_TYPE.PARAGRAPH) 
       style.base_style = styles['Normal']
       font = style.font
       font.bold = True
       font.underline = True
       font.size = Pt(16)

       styles = self.document.styles
       style = styles.add_style('Bold StyleC', WD_STYLE_TYPE.CHARACTER) 
       style.base_style = styles['Normal']
       font = style.font
       font.bold = True

       style = styles.add_style('Bold Underline StyleC', WD_STYLE_TYPE.CHARACTER) 
       style.base_style = styles['Normal']
       font = style.font
       font.bold = True
       font.underline = True

       style = styles.add_style('Bold Large StyleC', WD_STYLE_TYPE.CHARACTER) 
       style.base_style = styles['Normal']
       font = style.font
       font.bold = True
       font.size = Pt(16)

       style = styles.add_style('Bold Underline Large StyleC', WD_STYLE_TYPE.CHARACTER) 
       style.base_style = styles['Normal']
       font = style.font
       font.bold = True
       font.underline = True
       font.size = Pt(16)
       table = self.document.add_table(10,2)

       cell = table.cell(0,0)
       p = cell.add_paragraph("Burren Sub Aqua Club\n")
       p.alignment = WD_ALIGN_PARAGRAPH.CENTER
       p.add_run("SNORKEL / DIVE PLAN\n")
       r = p.add_run("Month 2016") 
       r.style = self.document.styles['Bold Underline Large StyleC']

       p.style = self.document.styles['Bold Large Style']
       cell = table.cell(0,1)
       p = cell.add_paragraph() 
       r = p.add_run()
       r.add_picture('Burren-Sub-Aqua-Logo.jpg')


       c1 = table.cell(1,0) 
       c2 = table.cell(1,1) 
       c1.merge(c2)
       p = c1.add_paragraph("A kitted brief should take place ")
       r = p.add_run("15 mins")
       r.style = self.document.styles['Bold Underline StyleC']
       p.add_run(" before dive departure times")
       p.alignment = WD_ALIGN_PARAGRAPH.CENTER
      
       c1 = table.cell(2,0) 
       c2 = table.cell(2,1) 
       c1.merge(c2)
       self.dive_table = c1.add_table(1,8)
       self.dive_table.style = 'Table Grid'
       self.dive_table.alignment = WD_TABLE_ALIGNMENT.CENTER


       c1 = table.cell(3,0) 
       c2 = table.cell(3,1) 
       c1.merge(c2)

       p = c1.add_paragraph("Note: Please check with the DOD if in doubt about conditions, particularly with strong westerly winds.")
       p.style = self.document.styles['Bold Underline Style']
       p.alignment = WD_ALIGN_PARAGRAPH.CENTER

       c1.add_paragraph("Note: The dives at 09.00am on Sundays are for Club Diver** and up only, unless announced otherwise")
       p = c1.add_paragraph()
       r = p.add_run("All members: ")
       r.style = self.document.styles['Bold Underline StyleC']
       p.add_run("if you intend to dive, please text the relevant DOD by 18.00 on the preceding Friday (Sunday dives), or by 18.00 hours on the preceding Monday (Wednesday dives).  This allows DODs time to plan dives and make alternative arrangements if necessary.  Divers who text after the deadline will be assigned a dive only if space allows, to be treated on a first come, first served basis")
       p = c1.add_paragraph()
       r = p.add_run("DODs / Dry Coxns: ")
       r.style = self.document.styles['Bold Underline StyleC']
       p.add_run("if you are unavailable for your slot, please arrange a swap yourself with someone else in good time and text me the new arrangement.  Please text members of a DOD change to avoid confusion.")
       p = c1.add_paragraph()
       r = p.add_run("DODs / Dry Coxns: ")
       r.style = self.document.styles['Bold Underline StyleC']
       p.add_run("please communicate and check with James in good time that he is available to bring the boat to the dive site, and make alternative arrangements if necessary.")
       c1.add_paragraph("Members undertaking dives outside the dive plan should inform me; otherwise, they cannot be regarded as club dives for insurance purposes.")
       p = c1.add_paragraph("LIFE JACKETS MUST BE WORN ON THE BOAT")
       p.style = self.document.styles['Bold Underline Style']
       p.alignment = WD_ALIGN_PARAGRAPH.CENTER
       p = c1.add_paragraph("DODs: ALL DIVE LOGS MUST BE FILLED AND RETAINED.  PLEASE PLACE IN THE JEEP WHEN COMPLETED.")
       p.style = self.document.styles['Bold Style']
       p.alignment = WD_ALIGN_PARAGRAPH.CENTER

       c1 = table.cell(4,0) 
       c2 = table.cell(4,1) 
       c1.merge(c2)
       p = c1.add_paragraph("DOD/COXN Telephone Numbers:")
       p.style = self.document.styles['Bold Underline Style']
       p.alignment = WD_ALIGN_PARAGRAPH.CENTER

       c1 = table.cell(5,0) 
       c2 = table.cell(5,1) 
       c1.merge(c2)
       t = c1.add_table(4,2)
       t.style = 'Table Grid'
       c1 = t.cell(0,0) 
       c1.add_paragraph("Cormac McMahon - 086 8119068")
       c1 = t.cell(1,0) 
       c1.add_paragraph("James McMahon - 087 6898005")
       c1 = t.cell(2,0) 
       c1.add_paragraph("Mary O'Donnell - 087 9845073")
       c1 = t.cell(3,0) 
       c1.add_paragraph("Alex McMahon - 086 8795949")
       c1 = t.cell(0,1) 
       c1.add_paragraph("Tadhg O'Brien - 086 8180044")
       c1 = t.cell(1,1) 
       c1.add_paragraph("John Underhill - 087 7537738")
       c1 = t.cell(2,1) 
       c1.add_paragraph("Caroline Hartigan - 087 2334748")
       c1 = t.cell(3,1) 
       c1.add_paragraph("Mark Gray - 085 7127021")

    def add_dive(self, day, date, venue, time, dod, coxn, hw, lw): 
       r = self.dive_table.add_row()
       r.cells[0].text = day 
       r.cells[1].text = date 
       r.cells[2].text = venue
       r.cells[3].text = time 
       r.cells[4].text = dod 
       r.cells[5].text = coxn 
       r.cells[6].text = hw 
       r.cells[7].text = lw 
       return r
       
    def add_header(self, day, date, venue, time, dod, coxn, hw, lw): 
       r = self.dive_table.add_row()
       r.style = self.document.styles['Bold Underline Style']
       r.cells[0].text = day 
       r.cells[1].text = date 
       r.cells[2].text = venue
       r.cells[3].text = time 
       r.cells[4].text = dod 
       r.cells[5].text = coxn 
       r.cells[6].text = hw 
       r.cells[7].text = lw 
       
    def publish(self):
       self.document.save('demo.docx')   

class Tide(object):
      def __init__(self, level, time, type):
            self.level = level
            self.time = time
            self.type = type
      def get_time(self):
            return time.strftime("%H:%M", self.time)
      def get_date(self):
            return time.strftime("%d/%m/%y", self.time)
      def get_type(self):
            return self.type
      def get_level(self):
            return self.level
      def __str__(self):
            return self.get_type()+"("+self.get_level()+"):"+self.get_date()+" "+self.get_time()
      def isNear(self, time_str):
            current_time = time.strptime(time_str, "%H:%M %d/%m/%y")
            diff_time = time.mktime(current_time) - time.mktime(self.time)
            return abs(diff_time / 60 / 60) < 6

class TideParse(object):
      def __init__(self, level, time):
            self.levels = []
            self.times = []
            self.increasing = None 
            self.max = level
            self.min = level
            self.levels.append(level)
            self.times.append(time)
      
      def add(self, level, time):
            self.levels.append(level)
            self.times.append(time)
            return self.parse()

      def format(self,str):
            return time.strptime(str, "%Y-%m-%dT%H:%M:%SZ")

      def get_time(self, level):
            return self.times[self.levels.index(level)] 

      def parse(self):
           if (self.max != max(self.levels)):
                  #Values increasing, rising tide
                  self.increasing = True
                  self.max = max(self.levels) 
                  return None
           if (self.min != min(self.levels)):
                  #Values decreasing, falling tide
                  self.increasing = False
                  self.min = min(self.levels) 
                  return None 
           if (self.max != max(self.levels)) & (self.min != min(self.levels)):
                  raise Exception("minmax error")
           if (self.max == max(self.levels)) & (self.min == min(self.levels)):
                  #Possible turning point
                  if (self.increasing == True) & (self.levels[-1] < self.levels[-2]):
                      t = self.format(self.get_time(self.max)) 
                      return Tide(self.max, t, "High")
                  elif (self.increasing == False) & (self.levels[-1] > self.levels[-2]):
                      t = self.format(self.get_time(self.min)) 
                      return Tide(self.min, t, "Low")
                  else:
                      return None

# First we read the csv file and parse all the high/low tides
tide_list = []
levels = {}

                                         
with open('data.csv', 'r') as csvfile:
   tidedata = csv.DictReader(csvfile)
   row = next(tidedata)

   tc = TideParse(row['Water_Level'], row['time'])
   levels.update({row['time'] : row['Water_Level']}) 
   
   for row in tidedata:
        tide = tc.add(row['Water_Level'], row['time'])
        levels.update({row['time'] : row['Water_Level']}) 

        if tide:
              tide_list.append(tide)
              tc = TideParse(row['Water_Level'], row['time'])

   high_tides = [tide for tide in tide_list if tide.get_type() == "High"]
   lahinch_spring_high_tide = max(tide.get_level() for tide in high_tides)
   lahinch_neap_high_tide = min(tide.get_level() for tide in high_tides)
   low_tides = [tide for tide in tide_list if tide.get_type() == "Low"]
   lahinch_spring_low_tide = min(tide.get_level() for tide in low_tides)
   lahinch_neap_low_tide = max(tide.get_level() for tide in low_tides)
    

   print("Spring high: ", lahinch_spring_high_tide)
   print("Neap high:   ", lahinch_neap_high_tide)
   print("Spring low:  ", lahinch_spring_low_tide)
   print("Neap Low:    ", lahinch_neap_low_tide)

   print(rule_of_twelfths(5, 0.1,  4))
    
                                     
   diveplan = DivePlan()
   diveplan.add_dive("Day", "Date", "Venue", "Time", "DoD", "Coxn", "HW", "LW")
    
   start = datetime.date(year = 2017, month = 1, day = 1 )
   end = datetime.date(year = 2017, month = 1, day = 31 )
 
   for date in daterange( start, end ):
       if date.weekday() == 6:
           # define date string
           date_string = "09:00 {}/{}/17".format(date.day, date.month)
           print(date_string)
           tides = [tide for tide in tide_list if tide.isNear(date_string)]
           high = [tide for tide in tides if tide.isNear(date_string) and tide.get_type() == "High"]
           low = [tide for tide in tides if tide.isNear(date_string) and tide.get_type() == "Low"]
           level = levels["2017-{:02d}-{:02d}T09:00:00Z".format(date.month, date.day)]

           site = ""
           if white_strand_start(float(level)):
               site += "White Strand\n"
           if gleninagh_start(float(level)):
               site += "Gleninagh Pier\n"
           if ballyvaughan_start(float(level)):
               site += "Ballyvaughan Pier\n"

           if high:
               high_time = high[0].get_time() 
               high_level = high[0].get_level() 
           else:
               high_time = ""
               high_level = ""
   
           if low:
               low_time = low[0].get_time() 
               low_level = low[0].get_level() 
           else:
               low_time = ""
               low_level = ""

           r1 = diveplan.add_dive(date.strftime("%a"), date.strftime("%b\n%d"), site, "09:00", "", "", "{}\n{}m".format(high_time, high_level), "{}\n{}m".format(low_time, low_level))
           # define date string
           date_string = "12:00 {}/{}/17".format(date.day, date.month)
           print(date_string)
           tides = [tide for tide in tide_list if tide.isNear(date_string)]
           high = [tide for tide in tides if tide.isNear(date_string) and tide.get_type() == "High"]
           low = [tide for tide in tides if tide.isNear(date_string) and tide.get_type() == "Low"]
           level = levels["2017-{:02d}-{:02d}T12:00:00Z".format(date.month, date.day)]

           site = ""
           if white_strand_start(float(level)):
               site += "White Strand\n"
           if gleninagh_start(float(level)):
               site += "Gleninagh Pier\n"
           if ballyvaughan_start(float(level)):
               site += "Ballyvaughan Pier\n"

           if high:
               high_time = high[0].get_time() 
               high_level = high[0].get_level() 
           else:
               high_time = ""
               high_level = ""
   
           if low:
               low_time = low[0].get_time() 
               low_level = low[0].get_level() 
           else:
               low_time = ""
               low_level = ""

           r2 = diveplan.add_dive(date.strftime("%a"), date.strftime("%b\n%d"), site, "12:00", "", "", "{}\n{}m".format(high_time, high_level), "{}\n{}m".format(low_time, low_level))

           for id in [0,1,2,6,7]: 
               c1 = r1.cells[id]
               text = c1.text
               c2 = r2.cells[id]
               c1 = c1.merge(c2)
               c1.text = text
               
    
           diveplan.add_dive("", "", "", "", "", "", "", "")
       if date.weekday() == 2:
           # define date string
           date_string = "19:00 {}/{}/17".format(date.day, date.month)
           print(date_string)
           tides = [tide for tide in tide_list if tide.isNear(date_string)]
           high = [tide for tide in tides if tide.isNear(date_string) and tide.get_type() == "High"]
           low = [tide for tide in tides if tide.isNear(date_string) and tide.get_type() == "Low"]
           level = levels["2017-{:02d}-{:02d}T19:00:00Z".format(date.month, date.day)]

           site = ""
           if white_strand_start(float(level)):
               site += "White Strand\n"
           if gleninagh_start(float(level)):
               site += "Gleninagh Pier\n"
           if ballyvaughan_start(float(level)):
               site += "Ballyvaughan Pier\n"

           if high:
               high_time = high[0].get_time() 
               high_level = high[0].get_level() 
           else:
               high_time = ""
               high_level = ""
   
           if low:
               low_time = low[0].get_time() 
               low_level = low[0].get_level() 
           else:
               low_time = ""
               low_level = ""

           diveplan.add_dive(date.strftime("%a"), date.strftime("%b\n%d"), site, "19:00", "", "", "{}\n{}m".format(high_time, high_level), "{}\n{}m".format(low_time, low_level))
           diveplan.add_dive("", "", "", "", "", "", "", "")

   diveplan.publish()
